"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["index.html","a011b081912e7463998df4ee1af090da"],["static/css/main.3d4054f0.css","1fc542867a96d6e32819641011172d44"],["static/js/main.d2623923.js","e6658fe7fb1016b61a3d09e3069c0510"],["static/media/1.e7a7cc8d.jpg","e7a7cc8dd3824475399663f4b072e1d9"],["static/media/10.6449cbdb.jpg","6449cbdbbcd28c9de1364ac71ceca7bf"],["static/media/11.da1b95e3.jpg","da1b95e37808b3057995f71e18e8d7a4"],["static/media/12.f05ff2bc.jpg","f05ff2bcb0757a2ba702d41b55f33a5b"],["static/media/13.7ff5bf5b.jpg","7ff5bf5bed864f95aebb7807c197f7d4"],["static/media/14.5f380271.jpg","5f380271f05c9d327ff12dd9f3f299a5"],["static/media/2.271de6ea.jpg","271de6ead3de55700f2efe305dca0452"],["static/media/3.f2c6215e.jpg","f2c6215e7dcc0217f882060c077c0d89"],["static/media/4.253ebb63.jpg","253ebb633ff91f84cacf20c97af510f7"],["static/media/5.345700be.jpg","345700be19643bf2a7605b74c12c6f50"],["static/media/6.17b23d7e.jpg","17b23d7ea6168129aa7fda751cc1d9eb"],["static/media/7.cf9afb10.jpg","cf9afb10b5e3c51a61ed64305971823e"],["static/media/8.4f629ad3.jpg","4f629ad365f16fe6a2d4bee79ba99507"],["static/media/9.253ebb63.jpg","253ebb633ff91f84cacf20c97af510f7"],["static/media/fontawesome-webfont.674f50d2.eot","674f50d287a8c48dc19ba404d20fe713"],["static/media/fontawesome-webfont.912ec66d.svg","912ec66d7572ff821749319396470bde"],["static/media/fontawesome-webfont.af7ae505.woff2","af7ae505a9eed503f8b8e6982036873e"],["static/media/fontawesome-webfont.b06871f2.ttf","b06871f281fee6b241d60582ae9369b9"],["static/media/fontawesome-webfont.fee66e71.woff","fee66e712a8a08eef5805a46892932ad"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,a){var t=new URL(e);return"/"===t.pathname.slice(-1)&&(t.pathname+=a),t.toString()},cleanResponse=function(e){if(!e.redirected)return Promise.resolve(e);return("body"in e?Promise.resolve(e.body):e.blob()).then(function(a){return new Response(a,{headers:e.headers,status:e.status,statusText:e.statusText})})},createCacheKey=function(e,a,t,n){var r=new URL(e);return n&&r.pathname.match(n)||(r.search+=(r.search?"&":"")+encodeURIComponent(a)+"="+encodeURIComponent(t)),r.toString()},isPathWhitelisted=function(e,a){if(0===e.length)return!0;var t=new URL(a).pathname;return e.some(function(e){return t.match(e)})},stripIgnoredUrlParameters=function(e,a){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return a.every(function(a){return!a.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var a=e[0],t=e[1],n=new URL(a,self.location),r=createCacheKey(n,hashParamName,t,/\.\w{8}\./);return[n.toString(),r]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(a){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!a.has(t)){var n=new Request(t,{credentials:"same-origin"});return fetch(n).then(function(a){if(!a.ok)throw new Error("Request for "+t+" returned a response with status "+a.status);return cleanResponse(a).then(function(a){return e.put(t,a)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var a=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(t){return Promise.all(t.map(function(t){if(!a.has(t.url))return e.delete(t)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var a,t=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),n="index.html";(a=urlsToCacheKeys.has(t))||(t=addDirectoryIndex(t,n),a=urlsToCacheKeys.has(t));var r="index.html";!a&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(t=new URL(r,self.location).toString(),a=urlsToCacheKeys.has(t)),a&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(t)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(a){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,a),fetch(e.request)}))}});